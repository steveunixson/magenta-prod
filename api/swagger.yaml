swagger: '2.0'
info:
  description: API V2 for Bonobo Calling automation service
  version: 2.0.0
  title: Bonobo v2 API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'localhost:3000'
basePath: /api/v2
tags:
  - name: org
    description: Create an organization
  - name: user
    description: Sign up and create organization
paths:
  /org:
    post:
      tags:
        - org
      summary: Creates list of users with given input array
      description: ''
      operationId: createOrganization
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Org'
      responses:
        default:
          description: successful operation
  /user/signup/admin:
    post:
      tags:
        - user
      summary: Create admin
      description: This can only be done after creating organization. Only one admin per organization. Admin role is to only control other use CRUD
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/Admin'
      responses:
        '200':
          description: success
  /user/signup:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        '200':
          description: successful operation
  /user/login:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: login
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Login'
      responses:
        '200':
          description: successful operation
    
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
definitions:
  Admin:
    type: object
    properties:
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      organization:
        type: string
  User:
    type: object
    properties:
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      organization:
        type: string
      password:
        type: string
      role:
        type: string
  
  Login:
    type: object
    properties:
      username:
        type: string
      organization:
        type: string
      password:
        type: string
  
  Org:
    type: object
    properties:
      organization:
        type: string
      domain:
        type: string
      payment:
        type: string
